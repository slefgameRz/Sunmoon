"use client"

import React, { useState, useEffect } from 'react'
import type { TideData, WeatherData } from '@/lib/tide-service'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import {
  Wifi,
  WifiOff,
  Zap,
  HardDrive,
  RefreshCw,
  TrendingDown,
  Network,
  Smartphone
} from 'lucide-react'
import { detectNetworkQuality, formatDataSize, calculateDataSavings } from '@/lib/network-optimization'
import { cn } from '@/lib/utils'

interface NetworkOptimizationStatsProps {
  tideData?: TideData | null
  weatherData?: WeatherData | null
  compressionStats?: {
    tideCompressed: boolean
    weatherCompressed: boolean
    totalSavings: string
  }
  onRefresh?: () => void
  className?: string
}

export default function NetworkOptimizationStats({
  tideData,
  weatherData,
  compressionStats,
  onRefresh,
  className
}: NetworkOptimizationStatsProps) {
  const [networkQuality, setNetworkQuality] = useState(detectNetworkQuality())
  const [dataUsage, setDataUsage] = useState({ total: 0, compressed: 0 })
  const [isRefreshing, setIsRefreshing] = useState(false)

  // Update network quality periodically
  useEffect(() => {
    const updateNetwork = () => setNetworkQuality(detectNetworkQuality())

    updateNetwork()
    const interval = setInterval(updateNetwork, 30000) // Update every 30 seconds

    // Listen for network changes
    window.addEventListener('online', updateNetwork)
    window.addEventListener('offline', updateNetwork)

    return () => {
      clearInterval(interval)
      window.removeEventListener('online', updateNetwork)
      window.removeEventListener('offline', updateNetwork)
    }
  }, [])

  // Calculate data usage stats
  useEffect(() => {
    if (tideData || weatherData) {
      const tideSize = tideData ? JSON.stringify(tideData).length : 0
      const weatherSize = weatherData ? JSON.stringify(weatherData).length : 0
      const totalOriginal = tideSize + weatherSize

      // Estimate compressed size (rough calculation)
      const compressionRatio = compressionStats?.totalSavings ?
        parseFloat(compressionStats.totalSavings) / 100 : 0.3 // Default 30% compression
      const totalCompressed = Math.round(totalOriginal * (1 - compressionRatio))

      setDataUsage({ total: totalOriginal, compressed: totalCompressed })
    }
  }, [tideData, weatherData, compressionStats])

  const handleRefresh = async () => {
    setIsRefreshing(true)
    try {
      await onRefresh?.()
    } finally {
      setIsRefreshing(false)
    }
  }

  const getNetworkIcon = () => {
    switch (networkQuality.type) {
      case 'excellent': return <Wifi className="h-5 w-5 text-green-600" />
      case 'good': return <Wifi className="h-5 w-5 text-blue-600" />
      case 'fair': return <Network className="h-5 w-5 text-yellow-600" />
      case 'poor': return <WifiOff className="h-5 w-5 text-red-600" />
      case 'offline': return <WifiOff className="h-5 w-5 text-gray-600" />
    }
  }

  const getNetworkColor = () => {
    switch (networkQuality.type) {
      case 'excellent': return 'bg-green-100 text-green-800 border-green-200'
      case 'good': return 'bg-blue-100 text-blue-800 border-blue-200'
      case 'fair': return 'bg-yellow-100 text-yellow-800 border-yellow-200'
      case 'poor': return 'bg-red-100 text-red-800 border-red-200'
      case 'offline': return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  const savings = calculateDataSavings(dataUsage.total, dataUsage.compressed)

  return (
    <Card className={cn("w-full", className)}>
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2 text-lg">
            <Smartphone className="h-5 w-5" />
            ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢
          </CardTitle>
          <Button
            variant="outline"
            size="sm"
            onClick={handleRefresh}
            disabled={isRefreshing}
            className="flex items-center gap-1"
          >
            <RefreshCw className={cn("h-4 w-4", isRefreshing && "animate-spin")} />
            ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
          </Button>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Network Status */}
        <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
          <div className="flex items-center gap-2">
            {getNetworkIcon()}
            <div>
              <div className="font-medium">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢</div>
              <div className="text-sm text-gray-600">
                {networkQuality.type === 'excellent' && '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° - 4G ‡πÄ‡∏£‡πá‡∏ß'}
                {networkQuality.type === 'good' && '‡∏î‡∏µ - 4G'}
                {networkQuality.type === 'fair' && '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á - 3G'}
                {networkQuality.type === 'poor' && '‡∏ä‡πâ‡∏≤ - 2G/‡∏ä‡πâ‡∏≤'}
                {networkQuality.type === 'offline' && '‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå'}
              </div>
            </div>
          </div>
          <Badge className={cn("font-medium", getNetworkColor())}>
            {networkQuality.speed.toUpperCase()}
          </Badge>
        </div>

        {/* Data Compression Stats */}
        {(compressionStats || dataUsage.total > 0) && (
          <div className="grid grid-cols-2 gap-3">
            <div className="p-3 bg-blue-50 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <HardDrive className="h-4 w-4 text-blue-600" />
                <span className="text-sm font-medium text-blue-800">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°</span>
              </div>
              <div className="text-lg font-bold text-blue-900">
                {formatDataSize(dataUsage.total)}
              </div>
            </div>

            <div className="p-3 bg-green-50 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <TrendingDown className="h-4 w-4 text-green-600" />
                <span className="text-sm font-medium text-green-800">‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î</span>
              </div>
              <div className="text-lg font-bold text-green-900">
                {formatDataSize(dataUsage.compressed)}
              </div>
              {savings.ratio > 0 && (
                <div className="text-xs text-green-700 mt-1">
                  ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î {savings.ratio}%
                </div>
              )}
            </div>
          </div>
        )}

        {/* Compression Details */}
        {compressionStats && (
          <div className="space-y-2">
            <div className="text-sm font-medium text-gray-700">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î:</div>
            <div className="flex flex-wrap gap-2">
              {compressionStats.tideCompressed && (
                <Badge variant="outline" className="text-xs">
                  üåä ‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡∏•‡∏á ‚úì
                </Badge>
              )}
              {compressionStats.weatherCompressed && (
                <Badge variant="outline" className="text-xs">
                  üå§Ô∏è ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‚úì
                </Badge>
              )}
              <Badge variant="secondary" className="text-xs">
                üíæ ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î {compressionStats.totalSavings}
              </Badge>
            </div>
          </div>
        )}

        {/* Network Optimization Tips */}
        <div className="p-3 bg-amber-50 rounded-lg border border-amber-200">
          <div className="flex items-start gap-2">
            <Zap className="h-4 w-4 text-amber-600 mt-0.5" />
            <div className="text-sm">
              <div className="font-medium text-amber-800 mb-1">‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û:</div>
              <ul className="text-amber-700 space-y-1 text-xs">
                {networkQuality.type === 'poor' && (
                  <>
                    <li>‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</li>
                    <li>‚Ä¢ ‡πÅ‡∏Ñ‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå</li>
                    <li>‚Ä¢ ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</li>
                  </>
                )}
                {networkQuality.type === 'fair' && (
                  <>
                    <li>‚Ä¢ ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô</li>
                    <li>‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ</li>
                  </>
                )}
                {networkQuality.type === 'excellent' && (
                  <li>‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå</li>
                )}
                {networkQuality.type === 'offline' && (
                  <li>‚Ä¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤</li>
                )}
              </ul>
            </div>
          </div>
        </div>

        {/* Battery Optimization Info */}
        {networkQuality.type === 'poor' && (
          <div className="text-xs text-gray-600 bg-gray-50 p-2 rounded">
            üîã ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏ã‡∏•‡∏•‡∏π‡∏•‡∏≤‡∏£‡πå‡∏ä‡πâ‡∏≤: ‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          </div>
        )}
      </CardContent>
    </Card>
  )
}