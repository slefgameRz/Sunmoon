import type { ForecastResult } from "@/lib/services/forecast"
import type { LocationData } from "@/lib/tide-service"
import type { LineMessage } from "./types"

const LINE_MAX_TEXT_LENGTH = 5000

export function buildWeatherMessages(
  location: LocationData,
  forecast: ForecastResult,
  options: { generatedAt?: Date } = {},
): LineMessage[] {
  const generatedAt = options.generatedAt ?? new Date()
  const header = `üå§Ô∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® & ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ ‚Äì ${location.name}`
  const timestamp = generatedAt.toLocaleString("th-TH", {
    hour: "2-digit",
    minute: "2-digit",
    day: "numeric",
    month: "short",
  })

  const lines: string[] = [header, `‚è± ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ${timestamp}`]

  if (forecast.weatherData) {
    const weather = forecast.weatherData
    const description = weather.weather?.[0]?.description ?? "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö"
    const windSpeed = weather.wind?.speed ?? 0
    lines.push(
      "",
      "üå°Ô∏è ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®",
      `‚Ä¢ ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ ${weather.main?.temp?.toFixed?.(1) ?? "-"}¬∞C (‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å ${weather.main?.feels_like?.toFixed?.(1) ?? "-"}¬∞C)`,
      `‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô ${weather.main?.humidity ?? "-"}% | ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ${weather.main?.pressure ?? "-"} hPa`,
      `‚Ä¢ ‡∏•‡∏° ${windSpeed.toFixed(1)} m/s ‚Äì ${description}`,
    )
  } else {
    lines.push("", "üå°Ô∏è ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", "‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°")
  }

  if (forecast.tideData) {
    const tide = forecast.tideData
    const events = Array.isArray(tide.tideEvents) ? tide.tideEvents : []
    const nextHigh = events.find((event) => event.type === "high")
    const nextLow = events.find((event) => event.type === "low")

    lines.push(
      "",
      "üåä ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥",
      `‚Ä¢ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ${Number.isFinite(tide.currentWaterLevel) ? tide.currentWaterLevel.toFixed(2) : "-"} ‡πÄ‡∏°‡∏ï‡∏£ (${tide.waterLevelStatus ?? "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö"})`,
      `‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡πâ‡∏≥: ${tide.tideStatus ?? "-"} | ‡∏Ñ‡πà‡∏≥‡∏ó‡∏µ‡πà ${tide.lunarPhaseKham ?? "-"}`,
      nextHigh ? `‚Ä¢ ‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ${nextHigh.time} (${nextHigh.level.toFixed(2)} ‡∏°.)` : "‚Ä¢ ‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: ‡πÑ‡∏°‡πà‡∏û‡∏ö",
      nextLow ? `‚Ä¢ ‡∏ô‡πâ‡∏≥‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ${nextLow.time} (${nextLow.level.toFixed(2)} ‡∏°.)` : "‚Ä¢ ‡∏ô‡πâ‡∏≥‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: ‡πÑ‡∏°‡πà‡∏û‡∏ö",
    )
  } else {
    lines.push("", "üåä ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥", "‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°")
  }

  if (forecast.error) {
    lines.push("", `‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${forecast.error}`)
  }

  const text = clampText(lines.join("\n"))
  const messages: LineMessage[] = [{ type: "text", text }]

  const tip = "üí° ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î Sunmoon"
  messages.push({ type: "text", text: tip })

  return messages
}

function clampText(text: string): string {
  if (text.length <= LINE_MAX_TEXT_LENGTH) {
    return text
  }
  return `${text.slice(0, LINE_MAX_TEXT_LENGTH - 1)}‚Ä¶`
}
